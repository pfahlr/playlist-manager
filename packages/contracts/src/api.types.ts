/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/playlists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List user playlists */
        get: operations["playlists_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a playlist */
        get: operations["playlists_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/playlists/{id}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List playlist items (effective fields by default) */
        get: operations["playlists_items_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/active-playlist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the active playlist pointer */
        get: operations["activePlaylist_get"];
        /** Set the active playlist */
        put: operations["activePlaylist_set"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/active-playlist/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Append item to active playlist */
        post: operations["activePlaylist_addItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/active-playlist/items/{itemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove item from active playlist */
        delete: operations["activePlaylist_removeItem"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/migrate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Migrate a playlist between providers */
        post: operations["jobs_requestMigration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get job status/report */
        get: operations["jobs_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/exports/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Export a playlist to file */
        post: operations["exports_enqueueFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artists/{mbid}/follow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Follow an artist by MBID */
        post: operations["artists_follow"];
        /** Unfollow artist */
        delete: operations["artists_unfollow"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artists/{mbid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get artist basics (bio + links) */
        get: operations["artists_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artists/{mbid}/relations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get artist relations */
        get: operations["artists_relations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            error: string;
            message: string;
        };
        PagedPlaylists: {
            data?: components["schemas"]["Playlist"][];
            next_cursor?: string | null;
        };
        Playlist: {
            id: number;
            name: string | null;
            provider?: string | null;
            provider_playlist_id?: string | null;
            /** Format: date-time */
            updated_at?: string | null;
        };
        PagedPlaylistItems: {
            data?: components["schemas"]["PlaylistItemEffective"][];
            next_cursor?: string | null;
        };
        PlaylistItemEffective: {
            id: number;
            position: number | null;
            title: string;
            artists: string;
            album?: string | null;
            duration_ms?: number | null;
            recording_id?: number | null;
            isrc?: string | null;
            /** @example b8d0d7c0-8e1c-4b34-8bc3-38d78a0c2b1f */
            mb_recording_id?: string | null;
            /** @example b7a6d2e4-1c77-4a9f-9d5b-0c3b2ea0f4a1 */
            mb_release_id?: string | null;
            provider_track_id?: string | null;
        };
        ActivePlaylist: {
            playlist_id: number | null;
            /** Format: date-time */
            updated_at: string;
        };
        JobRef: {
            job_id: number;
            /** @enum {string} */
            status: "queued" | "running" | "succeeded" | "failed";
        };
        Job: {
            id: number;
            /** @enum {string} */
            status: "queued" | "running" | "succeeded" | "failed";
            report?: {
                matched_isrc_pct?: number;
                matched_fuzzy_pct?: number;
                unresolved?: Record<string, never>[];
            };
            /** Format: uri */
            artifact_url?: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at?: string | null;
        };
        Artist: {
            /** @example 123e4567-e89b-12d3-a456-426614174000 */
            mbid: string;
            name: string;
            bio?: {
                source?: string;
                summary?: string | null;
                /** Format: uri */
                url?: string | null;
            } | null;
            links?: {
                kind: string;
                /** Format: uri */
                url: string;
            }[];
            /** Format: date-time */
            updated_at?: string | null;
        };
        ArtistRelation: {
            /** @enum {string} */
            type: "influences" | "influenced_by" | "collaborated_with" | "member_of" | "has_members";
            artist: {
                /** @example abcdefab-1234-5678-90ab-abcdefabcdef */
                mbid: string;
                name: string;
            };
        };
    };
    responses: {
        /** @description Not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Bad request */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unauthorized */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unprocessable entity */
        UnprocessableEntity: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    playlists_list: {
        parameters: {
            query?: {
                provider?: "spotify" | "deezer" | "tidal" | "youtube";
                limit?: number;
                cursor?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PagedPlaylists"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
        };
    };
    playlists_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Playlist"];
                };
            };
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
        };
    };
    playlists_items_list: {
        parameters: {
            query?: {
                effective?: boolean;
                limit?: number;
                cursor?: string;
                order?: "position" | "added_at";
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PagedPlaylistItems"];
                };
            };
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            422: components["responses"]["UnprocessableEntity"];
        };
    };
    activePlaylist_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActivePlaylist"];
                };
            };
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
        };
    };
    activePlaylist_set: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    playlist_id: number;
                };
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
        };
    };
    activePlaylist_addItem: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    recording_id: number;
                    /**
                     * @default append
                     * @enum {string}
                     */
                    position?: "append" | "head";
                } | {
                    isrc: string;
                    /**
                     * @default append
                     * @enum {string}
                     */
                    position?: "append" | "head";
                } | {
                    title: string;
                    primary_artist: string;
                    /**
                     * @default append
                     * @enum {string}
                     */
                    position?: "append" | "head";
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlaylistItemEffective"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
        };
    };
    activePlaylist_removeItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                itemId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
        };
    };
    jobs_requestMigration: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    source_provider: "spotify" | "deezer" | "tidal" | "youtube";
                    source_playlist_id: number;
                    /** @enum {string} */
                    dest_provider: "spotify" | "deezer" | "tidal" | "youtube";
                    dest_playlist_name?: string;
                };
            };
        };
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobRef"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
        };
    };
    jobs_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Job"];
                };
            };
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
        };
    };
    exports_enqueueFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    playlist_id: number;
                    /** @enum {string} */
                    format: "m3u" | "xspf" | "csv";
                    /**
                     * @default lean
                     * @enum {string}
                     */
                    variant?: "lean" | "verbose";
                };
            };
        };
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobRef"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
        };
    };
    artists_follow: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mbid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequest"];
        };
    };
    artists_unfollow: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mbid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["NotFound"];
        };
    };
    artists_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mbid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Artist"];
                };
            };
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
        };
    };
    artists_relations: {
        parameters: {
            query?: {
                types?: ("influences" | "influenced_by" | "collaborated_with" | "member_of" | "has_members")[];
            };
            header?: never;
            path: {
                mbid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["ArtistRelation"][];
                    };
                };
            };
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
        };
    };
}
